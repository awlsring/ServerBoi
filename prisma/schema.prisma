// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// API

//// Internal
model UserAuth {
  key String @unique
  scope String
  valid Boolean @default(true)
}

model ProviderAuth {
  id             String       @id @default(uuid())
  provider Provider @relation(fields: [providerId], references: [id])
  providerId String @unique
  key String
  secret String?
}

//// External
model Server {
  scopeId String
  serverId       String
  addedAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  application String 
  address   String
  port Int?
  capabilities String[]
  status Status?
  provider Provider? @relation(fields: [providerId], references: [id])
  providerId String?
  providerData ProviderServerData?
  providerDataId String?
  ownerId String
  queryType String
  queryAddress String?
  queryPort Int?
  city String
  country String
  region String
  countryEmoji String
  @@id([scopeId, serverId])
}

model Status {
  id             String       @id @default(uuid())
  status String
  query String?
  provider String?
  server Server @relation(fields: [serverScopeId, serverId], references: [scopeId, serverId])
  serverScopeId String
  serverId String
  @@unique([serverScopeId, serverId])
  data String?
}

model Provider {
  id             String       @id @default(uuid())
  ownerId        String
  name           String
  type String
  subType String?
  auth ProviderAuth?
  data String?
  serverData ProviderServerData[]
  servers Server[]
}

model ProviderServerData {
  id             String       @id @default(uuid())
  provider Provider @relation(fields: [providerId], references: [id])
  providerId String
  server Server @relation(fields: [serverScopeId, serverId], references: [scopeId, serverId])
  serverScopeId String
  serverId String
  @@unique([serverScopeId, serverId])
  identifier String
  location String?
  data String?
} 

// Discord specific
model TrackServer {
  id       String @unique
  startedAt DateTime @default(now())
  endedAt DateTime? @updatedAt
  name      String
  application String 
  address   String
  port Int
  provider String?
  providerServerIdentifier String?
  providerServerLocation String?
  providerServerData String?
  ownerId String
  queryType String?
  queryAddress String?
  queryPort Int?
  channelId String?
  capabilities String[]
}

model CreateProviderRequest {
  id       String @unique
  startedAt DateTime @default(now())
  endedAt DateTime? @updatedAt
  providerType String
  providerSubType String?
  providerData String?
  providerAuthKey String?
  providerAuthSecret String?
  providerName String?
}

model ServerCard {
  id       String @id @default(uuid())
  messageId       String      @unique
  addedAt DateTime @default(now())
  serverId String @unique
  channelId String
  ownerId String
  admins String[]
  alertUsers String[]
  alertChannels String[]
}